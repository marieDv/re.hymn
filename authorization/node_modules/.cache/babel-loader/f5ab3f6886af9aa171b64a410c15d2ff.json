{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar MongoError = require('./error').MongoError;\n\nvar TxnState;\nvar stateMachine;\n\n(function () {\n  var _stateMachine;\n\n  var NO_TRANSACTION = 'NO_TRANSACTION';\n  var STARTING_TRANSACTION = 'STARTING_TRANSACTION';\n  var TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';\n  var TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';\n  var TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';\n  var TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';\n  TxnState = {\n    NO_TRANSACTION: NO_TRANSACTION,\n    STARTING_TRANSACTION: STARTING_TRANSACTION,\n    TRANSACTION_IN_PROGRESS: TRANSACTION_IN_PROGRESS,\n    TRANSACTION_COMMITTED: TRANSACTION_COMMITTED,\n    TRANSACTION_COMMITTED_EMPTY: TRANSACTION_COMMITTED_EMPTY,\n    TRANSACTION_ABORTED: TRANSACTION_ABORTED\n  };\n  stateMachine = (_stateMachine = {}, _defineProperty(_stateMachine, NO_TRANSACTION, [NO_TRANSACTION, STARTING_TRANSACTION]), _defineProperty(_stateMachine, STARTING_TRANSACTION, [TRANSACTION_IN_PROGRESS, TRANSACTION_COMMITTED, TRANSACTION_COMMITTED_EMPTY, TRANSACTION_ABORTED]), _defineProperty(_stateMachine, TRANSACTION_IN_PROGRESS, [TRANSACTION_IN_PROGRESS, TRANSACTION_COMMITTED, TRANSACTION_ABORTED]), _defineProperty(_stateMachine, TRANSACTION_COMMITTED, [TRANSACTION_COMMITTED, TRANSACTION_COMMITTED_EMPTY, STARTING_TRANSACTION, NO_TRANSACTION]), _defineProperty(_stateMachine, TRANSACTION_ABORTED, [STARTING_TRANSACTION, NO_TRANSACTION]), _defineProperty(_stateMachine, TRANSACTION_COMMITTED_EMPTY, [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]), _stateMachine);\n})();\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @typedef {Object} ReadConcern\n * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level\n * @see https://docs.mongodb.com/manual/reference/read-concern/\n */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @typedef {Object} WriteConcern\n * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has\n * propagated to a specified number of mongod hosts\n * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has\n * been written to the journal\n * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/\n */\n\n/**\n * Configuration options for a transaction.\n * @typedef {Object} TransactionOptions\n * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction\n * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction\n * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction\n */\n\n/**\n * A class maintaining state related to a server transaction. Internal Only\n * @ignore\n */\n\n\nvar Transaction =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a transaction\n   *\n   * @ignore\n   * @param {TransactionOptions} [options] Optional settings\n   */\n  function Transaction(options) {\n    _classCallCheck(this, Transaction);\n\n    options = options || {};\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n\n    if (options.writeConcern || typeof options.w !== 'undefined') {\n      var w = options.writeConcern ? options.writeConcern.w : options.w;\n\n      if (w <= 0) {\n        throw new MongoError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = options.writeConcern ? options.writeConcern : {\n        w: options.w\n      };\n    }\n\n    if (options.readConcern) this.options.readConcern = options.readConcern;\n    if (options.readPreference) this.options.readPreference = options.readPreference;\n  }\n  /**\n   * @ignore\n   * @return Whether this session is presently in a transaction\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"transition\",\n\n    /**\n     * Transition the transaction in the state machine\n     * @ignore\n     * @param {TxnState} state The new state to transition to\n     */\n    value: function transition(nextState) {\n      var nextStates = stateMachine[this.state];\n\n      if (nextStates && nextStates.indexOf(nextState) !== -1) {\n        this.state = nextState;\n        return;\n      }\n\n      throw new MongoError(\"Attempted illegal state transition from [\".concat(this.state, \"] to [\").concat(nextState, \"]\"));\n    }\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return [TxnState.STARTING_TRANSACTION, TxnState.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nmodule.exports = {\n  TxnState: TxnState,\n  Transaction: Transaction\n};","map":null,"metadata":{},"sourceType":"script"}