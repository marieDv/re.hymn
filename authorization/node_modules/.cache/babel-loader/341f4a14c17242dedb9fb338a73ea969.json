{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _wrapNativeSuper = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar mongoErrorContextSymbol = Symbol('mongoErrorContextSymbol');\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\n\nvar MongoError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(MongoError, _Error);\n\n  function MongoError(message) {\n    var _this;\n\n    _classCallCheck(this, MongoError);\n\n    if (message instanceof Error) {\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message.message));\n      _this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message));\n      } else {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message.message || message.errmsg || message.$err || 'n/a'));\n\n        for (var name in message) {\n          _this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this)), _this.constructor);\n    }\n\n    _this.name = 'MongoError';\n    _this[mongoErrorContextSymbol] = _this[mongoErrorContextSymbol] || {};\n    return _possibleConstructorReturn(_this);\n  }\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n\n\n  _createClass(MongoError, null, [{\n    key: \"create\",\n    value: function create(options) {\n      return new MongoError(options);\n    }\n  }]);\n\n  return MongoError;\n}(_wrapNativeSuper(Error));\n/**\n * Creates a new MongoNetworkError\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\n\n\nvar MongoNetworkError =\n/*#__PURE__*/\nfunction (_MongoError) {\n  _inherits(MongoNetworkError, _MongoError);\n\n  function MongoNetworkError(message) {\n    var _this2;\n\n    _classCallCheck(this, MongoNetworkError);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MongoNetworkError).call(this, message));\n    _this2.name = 'MongoNetworkError'; // This is added as part of the transactions specification\n\n    _this2.errorLabels = ['TransientTransactionError'];\n    return _this2;\n  }\n\n  return MongoNetworkError;\n}(MongoError);\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n */\n\n\nvar MongoParseError =\n/*#__PURE__*/\nfunction (_MongoError2) {\n  _inherits(MongoParseError, _MongoError2);\n\n  function MongoParseError(message) {\n    var _this3;\n\n    _classCallCheck(this, MongoParseError);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(MongoParseError).call(this, message));\n    _this3.name = 'MongoParseError';\n    return _this3;\n  }\n\n  return MongoParseError;\n}(MongoError);\n/**\n * An error signifying a timeout event\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n */\n\n\nvar MongoTimeoutError =\n/*#__PURE__*/\nfunction (_MongoError3) {\n  _inherits(MongoTimeoutError, _MongoError3);\n\n  function MongoTimeoutError(message) {\n    var _this4;\n\n    _classCallCheck(this, MongoTimeoutError);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(MongoTimeoutError).call(this, message));\n    _this4.name = 'MongoTimeoutError';\n    return _this4;\n  }\n\n  return MongoTimeoutError;\n}(MongoError);\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n */\n\n\nvar MongoWriteConcernError =\n/*#__PURE__*/\nfunction (_MongoError4) {\n  _inherits(MongoWriteConcernError, _MongoError4);\n\n  function MongoWriteConcernError(message, result) {\n    var _this5;\n\n    _classCallCheck(this, MongoWriteConcernError);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(MongoWriteConcernError).call(this, message));\n    _this5.name = 'MongoWriteConcernError';\n\n    if (result != null) {\n      _this5.result = result;\n    }\n\n    return _this5;\n  }\n\n  return MongoWriteConcernError;\n}(MongoError); // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\n\nvar RETRYABLE_ERROR_CODES = new Set([6, // HostUnreachable\n7, // HostNotFound\n89, // NetworkTimeout\n91, // ShutdownInProgress\n189, // PrimarySteppedDown\n9001, // SocketException\n10107, // NotMaster\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13435, // NotMasterNoSlaveOk\n13436 // NotMasterOrSecondary\n]);\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @param {(MongoError|Error})} error\n */\n\nfunction isRetryableError(error) {\n  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);\n}\n\nmodule.exports = {\n  MongoError: MongoError,\n  MongoNetworkError: MongoNetworkError,\n  MongoParseError: MongoParseError,\n  MongoTimeoutError: MongoTimeoutError,\n  MongoWriteConcernError: MongoWriteConcernError,\n  mongoErrorContextSymbol: mongoErrorContextSymbol,\n  isRetryableError: isRetryableError\n};","map":null,"metadata":{},"sourceType":"script"}