{"ast":null,"code":"'use strict';\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @class\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {array} tags The tags object\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\n * @return {ReadPreference}\n * @example\n * const ReplSet = require('mongodb-core').ReplSet,\n *   ReadPreference = require('mongodb-core').ReadPreference,\n *   assert = require('assert');\n *\n * const server = new ReplSet([{host: 'localhost', port: 30000}], {setName: 'rs'});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   const cursor = server.cursor(\n *     'db.test',\n *     { find: 'db.test', query: {} },\n *     { readPreference: new ReadPreference('secondary') }\n *   );\n *\n *   cursor.next(function(err, doc) {\n *     server.destroy();\n *   });\n * });\n *\n * // Start connecting\n * server.connect();\n * @see https://docs.mongodb.com/manual/core/read-preference/\n */\n\nvar ReadPreference = function ReadPreference(mode, tags, options) {\n  // TODO(major): tags MUST be an array of tagsets\n  if (tags && !Array.isArray(tags)) {\n    console.warn('ReadPreference tags must be an array, this will change in the next major version');\n\n    if (typeof tags.maxStalenessSeconds !== 'undefined') {\n      // this is likely an options object\n      options = tags;\n      tags = undefined;\n    } else {\n      tags = [tags];\n    }\n  }\n\n  this.mode = mode;\n  this.tags = tags;\n  options = options || {};\n\n  if (options.maxStalenessSeconds != null) {\n    if (options.maxStalenessSeconds <= 0) {\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\n    }\n\n    this.maxStalenessSeconds = options.maxStalenessSeconds; // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n    //       topology has a lower value then a MongoError will be thrown during server selection.\n\n    this.minWireVersion = 5;\n  }\n\n  if (this.mode === ReadPreference.PRIMARY || this.mode === true) {\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n      throw new TypeError('Primary read preference cannot be combined with tags');\n    }\n\n    if (this.maxStalenessSeconds) {\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\n    }\n  }\n}; // Support the deprecated `preference` property introduced in the porcelain layer\n\n\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function get() {\n    return this.mode;\n  }\n});\n/*\n * Read preference mode constants\n */\n\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\nvar VALID_MODES = [ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, true, false, null];\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\n\nReadPreference.isValid = function (mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\n\n\nReadPreference.prototype.isValid = function (mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\n\nvar needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n/**\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n * @method\n * @return {boolean}\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n */\n\nReadPreference.prototype.slaveOk = function () {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n/**\n * Are the two read preference equal\n * @method\n * @param {ReadPreference} readPreference The read preference with which to check equality\n * @return {boolean} True if the two ReadPreferences are equivalent\n */\n\n\nReadPreference.prototype.equals = function (readPreference) {\n  return readPreference.mode === this.mode;\n};\n/**\n * Return JSON representation\n * @method\n * @return {Object} A JSON representation of the ReadPreference\n */\n\n\nReadPreference.prototype.toJSON = function () {\n  var readPreference = {\n    mode: this.mode\n  };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  return readPreference;\n};\n/**\n * Primary read preference\n * @member\n * @type {ReadPreference}\n */\n\n\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\n\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @member\n * @type {ReadPreference}\n */\n\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\n\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @member\n * @type {ReadPreference}\n */\n\nReadPreference.nearest = new ReadPreference('nearest');\nmodule.exports = ReadPreference;","map":null,"metadata":{},"sourceType":"script"}