{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/marie/PhpstormProjects/musicmerge_react/authorization/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar EventEmitter = require('events');\n\nvar isResumableError = require('./error').isResumableError;\n\nvar MongoError = require('mongodb-core').MongoError;\n\nvar cursorOptionNames = ['maxAwaitTimeMS', 'collation', 'readPreference'];\nvar CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @class ChangeStream\n * @since 3.0.0\n * @param {(MongoClient|Db|Collection)} changeDomain The domain against which to create the change stream\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n * @param {object} [options] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.batchSize] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @fires ChangeStream#close\n * @fires ChangeStream#change\n * @fires ChangeStream#end\n * @fires ChangeStream#error\n * @return {ChangeStream} a ChangeStream instance.\n */\n\nvar ChangeStream =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(ChangeStream, _EventEmitter);\n\n  function ChangeStream(changeDomain, pipeline, options) {\n    var _this;\n\n    _classCallCheck(this, ChangeStream);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeStream).call(this));\n\n    var Collection = require('./collection');\n\n    var Db = require('./db');\n\n    var MongoClient = require('./mongo_client');\n\n    _this.pipeline = pipeline || [];\n    _this.options = options || {};\n    _this.cursorNamespace = undefined;\n    _this.namespace = {};\n\n    if (changeDomain instanceof Collection) {\n      _this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      _this.topology = changeDomain.s.db.serverConfig;\n      _this.namespace = {\n        collection: changeDomain.collectionName,\n        database: changeDomain.s.db.databaseName\n      };\n      _this.cursorNamespace = \"\".concat(_this.namespace.database, \".\").concat(_this.namespace.collection);\n    } else if (changeDomain instanceof Db) {\n      _this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      _this.namespace = {\n        collection: '',\n        database: changeDomain.databaseName\n      };\n      _this.cursorNamespace = _this.namespace.database;\n      _this.topology = changeDomain.serverConfig;\n    } else if (changeDomain instanceof MongoClient) {\n      _this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      _this.namespace = {\n        collection: '',\n        database: 'admin'\n      };\n      _this.cursorNamespace = _this.namespace.database;\n      _this.topology = changeDomain.topology;\n    } else {\n      throw new TypeError('changeDomain provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient');\n    }\n\n    _this.promiseLibrary = changeDomain.s.promiseLibrary;\n\n    if (!_this.options.readPreference && changeDomain.s.readPreference) {\n      _this.options.readPreference = changeDomain.s.readPreference;\n    } // We need to get the operationTime as early as possible\n\n\n    var isMaster = _this.topology.lastIsMaster();\n\n    if (!isMaster) {\n      throw new MongoError('Topology does not have an ismaster yet.');\n    }\n\n    _this.operationTime = isMaster.operationTime; // Create contained Change Stream cursor\n\n    _this.cursor = createChangeStreamCursor(_assertThisInitialized(_assertThisInitialized(_this))); // Listen for any `change` listeners being added to ChangeStream\n\n    _this.on('newListener', function (eventName) {\n      if (eventName === 'change' && _this.cursor && _this.listenerCount('change') === 0) {\n        _this.cursor.on('data', function (change) {\n          return processNewChange({\n            changeStream: _assertThisInitialized(_assertThisInitialized(_this)),\n            change: change,\n            eventEmitter: true\n          });\n        });\n      }\n    }); // Listen for all `change` listeners being removed from ChangeStream\n\n\n    _this.on('removeListener', function (eventName) {\n      if (eventName === 'change' && _this.listenerCount('change') === 0 && _this.cursor) {\n        _this.cursor.removeAllListeners('data');\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * Check if there is any document still available in the Change Stream\n   * @function ChangeStream.prototype.hasNext\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @return {Promise} returns Promise if no callback passed\n   */\n\n\n  _createClass(ChangeStream, [{\n    key: \"hasNext\",\n    value: function hasNext(callback) {\n      return this.cursor.hasNext(callback);\n    }\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @function ChangeStream.prototype.next\n     * @param {ChangeStream~resultCallback} [callback] The result callback.\n     * @throws {MongoError}\n     * @return {Promise} returns Promise if no callback passed\n     */\n\n  }, {\n    key: \"next\",\n    value: function next(callback) {\n      var self = this;\n\n      if (this.isClosed()) {\n        if (callback) return callback(new Error('Change Stream is not open.'), null);\n        return self.promiseLibrary.reject(new Error('Change Stream is not open.'));\n      }\n\n      return this.cursor.next().then(function (change) {\n        return processNewChange({\n          changeStream: self,\n          change: change,\n          callback: callback\n        });\n      }).catch(function (error) {\n        return processNewChange({\n          changeStream: self,\n          error: error,\n          callback: callback\n        });\n      });\n    }\n    /**\n     * Is the cursor closed\n     * @method ChangeStream.prototype.isClosed\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      if (this.cursor) {\n        return this.cursor.isClosed();\n      }\n\n      return true;\n    }\n    /**\n     * Close the Change Stream\n     * @method ChangeStream.prototype.close\n     * @param {ChangeStream~resultCallback} [callback] The result callback.\n     * @return {Promise} returns Promise if no callback passed\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      if (!this.cursor) {\n        if (callback) return callback();\n        return this.promiseLibrary.resolve();\n      } // Tidy up the existing cursor\n\n\n      var cursor = this.cursor;\n      delete this.cursor;\n      return cursor.close(callback);\n    }\n    /**\n     * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n     * @method\n     * @param {Writable} destination The destination for writing data\n     * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\n     * @return {null}\n     */\n\n  }, {\n    key: \"pipe\",\n    value: function pipe(destination, options) {\n      if (!this.pipeDestinations) {\n        this.pipeDestinations = [];\n      }\n\n      this.pipeDestinations.push(destination);\n      return this.cursor.pipe(destination, options);\n    }\n    /**\n     * This method will remove the hooks set up for a previous pipe() call.\n     * @param {Writable} [destination] The destination for writing data\n     * @return {null}\n     */\n\n  }, {\n    key: \"unpipe\",\n    value: function unpipe(destination) {\n      if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\n        this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\n      }\n\n      return this.cursor.unpipe(destination);\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @method\n     * @param {object} [options] Optional settings.\n     * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\n     * @return {Cursor}\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      this.streamOptions = options;\n      return this.cursor.stream(options);\n    }\n    /**\n     * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n     * @return {null}\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      return this.cursor.pause();\n    }\n    /**\n     * This method will cause the readable stream to resume emitting data events.\n     * @return {null}\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      return this.cursor.resume();\n    }\n  }]);\n\n  return ChangeStream;\n}(EventEmitter); // Create a new change stream cursor based on self's configuration\n\n\nvar createChangeStreamCursor = function createChangeStreamCursor(self) {\n  if (self.resumeToken) {\n    self.options.resumeAfter = self.resumeToken;\n  }\n\n  var changeStreamCursor = buildChangeStreamAggregationCommand(self);\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   *\n   * @event ChangeStream#change\n   * @type {object}\n   */\n\n  if (self.listenerCount('change') > 0) {\n    changeStreamCursor.on('data', function (change) {\n      processNewChange({\n        changeStream: self,\n        change: change,\n        eventEmitter: true\n      });\n    });\n  }\n  /**\n   * Change stream close event\n   *\n   * @event ChangeStream#close\n   * @type {null}\n   */\n\n\n  changeStreamCursor.on('close', function () {\n    self.emit('close');\n  });\n  /**\n   * Change stream end event\n   *\n   * @event ChangeStream#end\n   * @type {null}\n   */\n\n  changeStreamCursor.on('end', function () {\n    self.emit('end');\n  });\n  /**\n   * Fired when the stream encounters an error.\n   *\n   * @event ChangeStream#error\n   * @type {Error}\n   */\n\n  changeStreamCursor.on('error', function (error) {\n    processNewChange({\n      changeStream: self,\n      error: error,\n      eventEmitter: true\n    });\n  });\n\n  if (self.pipeDestinations) {\n    var cursorStream = changeStreamCursor.stream(self.streamOptions);\n\n    for (var pipeDestination in self.pipeDestinations) {\n      cursorStream.pipe(pipeDestination);\n    }\n  }\n\n  return changeStreamCursor;\n};\n\nfunction getResumeToken(self) {\n  return self.resumeToken || self.options.resumeAfter;\n}\n\nfunction getStartAtOperationTime(self) {\n  var isMaster = self.topology.lastIsMaster() || {};\n  return isMaster.maxWireVersion && isMaster.maxWireVersion >= 7 && self.options.startAtOperationTime;\n}\n\nvar buildChangeStreamAggregationCommand = function buildChangeStreamAggregationCommand(self) {\n  var topology = self.topology;\n  var namespace = self.namespace;\n  var pipeline = self.pipeline;\n  var options = self.options;\n  var cursorNamespace = self.cursorNamespace;\n  var changeStreamStageOptions = {\n    fullDocument: options.fullDocument || 'default'\n  };\n  var resumeToken = getResumeToken(self);\n  var startAtOperationTime = getStartAtOperationTime(self);\n\n  if (resumeToken) {\n    changeStreamStageOptions.resumeAfter = resumeToken;\n  }\n\n  if (startAtOperationTime) {\n    changeStreamStageOptions.startAtOperationTime = startAtOperationTime;\n  } // Map cursor options\n\n\n  var cursorOptions = {};\n  cursorOptionNames.forEach(function (optionName) {\n    if (options[optionName]) {\n      cursorOptions[optionName] = options[optionName];\n    }\n  });\n\n  if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  var changeStreamPipeline = [{\n    $changeStream: changeStreamStageOptions\n  }];\n  changeStreamPipeline = changeStreamPipeline.concat(pipeline);\n  var command = {\n    aggregate: self.type === CHANGE_DOMAIN_TYPES.COLLECTION ? namespace.collection : 1,\n    pipeline: changeStreamPipeline,\n    readConcern: {\n      level: 'majority'\n    },\n    cursor: {\n      batchSize: options.batchSize || 1\n    }\n  }; // Create and return the cursor\n\n  return topology.cursor(cursorNamespace, command, cursorOptions);\n}; // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nvar SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(function () {\n    if (options && options.start == null) options.start = process.hrtime();\n    var start = options.start || process.hrtime();\n    var timeout = options.timeout || SELECTION_TIMEOUT;\n    var readPreference = options.readPreference;\n    if (topology.isConnected({\n      readPreference: readPreference\n    })) return callback(null, null);\n    var hrElapsed = process.hrtime(start);\n    var elapsed = (hrElapsed[0] * 1e9 + hrElapsed[1]) / 1e6;\n    if (elapsed > timeout) return callback(new MongoError('Timed out waiting for connection'));\n    waitForTopologyConnected(topology, options, callback);\n  }, 3000); // this is an arbitrary wait time to allow SDAM to transition\n} // Handle new change events. This method brings together the routes from the callback, event emitter, and promise ways of using ChangeStream.\n\n\nfunction processNewChange(args) {\n  var changeStream = args.changeStream;\n  var error = args.error;\n  var change = args.change;\n  var callback = args.callback;\n  var eventEmitter = args.eventEmitter || false;\n  var topology = changeStream.topology;\n  var options = changeStream.cursor.options;\n\n  if (error) {\n    if (isResumableError(error) && !changeStream.attemptingResume) {\n      changeStream.attemptingResume = true;\n\n      if (!(getResumeToken(changeStream) || getStartAtOperationTime(changeStream))) {\n        var startAtOperationTime = changeStream.cursor.cursorState.operationTime;\n        changeStream.options = Object.assign({\n          startAtOperationTime: startAtOperationTime\n        }, changeStream.options);\n      } // stop listening to all events from old cursor\n\n\n      ['data', 'close', 'end', 'error'].forEach(function (event) {\n        return changeStream.cursor.removeAllListeners(event);\n      }); // close internal cursor, ignore errors\n\n      changeStream.cursor.close(); // attempt recreating the cursor\n\n      if (eventEmitter) {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, function (err) {\n          if (err) return changeStream.emit('error', err);\n          changeStream.cursor = createChangeStreamCursor(changeStream);\n        });\n        return;\n      }\n\n      if (callback) {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, function (err) {\n          if (err) return callback(err, null);\n          changeStream.cursor = createChangeStreamCursor(changeStream);\n          changeStream.next(callback);\n        });\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, function (err) {\n          if (err) return reject(err);\n          resolve();\n        });\n      }).then(function () {\n        return changeStream.cursor = createChangeStreamCursor(changeStream);\n      }).then(function () {\n        return changeStream.next();\n      });\n    }\n\n    if (eventEmitter) return changeStream.emit('error', error);\n    if (typeof callback === 'function') return callback(error, null);\n    return changeStream.promiseLibrary.reject(error);\n  }\n\n  changeStream.attemptingResume = false; // Cache the resume token if it is present. If it is not present return an error.\n\n  if (!change || !change._id) {\n    var noResumeTokenError = new Error('A change stream document has been received that lacks a resume token (_id).');\n    if (eventEmitter) return changeStream.emit('error', noResumeTokenError);\n    if (typeof callback === 'function') return callback(noResumeTokenError, null);\n    return changeStream.promiseLibrary.reject(noResumeTokenError);\n  }\n\n  changeStream.resumeToken = change._id; // Return the change\n\n  if (eventEmitter) return changeStream.emit('change', change);\n  if (typeof callback === 'function') return callback(error, change);\n  return changeStream.promiseLibrary.resolve(change);\n}\n/**\n * The callback format for results\n * @callback ChangeStream~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n\nmodule.exports = ChangeStream;","map":null,"metadata":{},"sourceType":"script"}