{"ast":null,"code":"'use strict';\n\nvar inherits = require('util').inherits;\n\nvar ReadPreference = require('mongodb-core').ReadPreference;\n\nvar MongoError = require('mongodb-core').MongoError;\n\nvar Readable = require('stream').Readable;\n\nvar CoreCursor = require('./cursor');\n/**\n * @fileOverview The **CommandCursor** class is an internal class that embodies a\n * generalized cursor based on a MongoDB command allowing for iteration over the\n * results returned. It supports one by one document iteration, conversion to an\n * array or can be iterated as a Node 0.10.X or higher stream\n *\n * **CommandCursor Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('listCollectionsExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // List the database collections available\n *     db.listCollections().toArray(function(err, items) {\n *       test.equal(null, err);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class CommandCursor\n * @extends external:Readable\n * @fires CommandCursor#data\n * @fires CommandCursor#end\n * @fires CommandCursor#close\n * @fires CommandCursor#readable\n * @return {CommandCursor} an CommandCursor instance.\n */\n\n\nvar CommandCursor = function CommandCursor(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var state = CommandCursor.INIT;\n  var streamOptions = {}; // MaxTimeMS\n\n  var maxTimeMS = null; // Get the promiseLibrary\n\n  var promiseLibrary = options.promiseLibrary || Promise; // Set up\n\n  Readable.call(this, {\n    objectMode: true\n  }); // Internal state\n\n  this.s = {\n    // MaxTimeMS\n    maxTimeMS: maxTimeMS,\n    // State\n    state: state,\n    // Stream options\n    streamOptions: streamOptions,\n    // BSON\n    bson: bson,\n    // Namespace\n    ns: ns,\n    // Command\n    cmd: cmd,\n    // Options\n    options: options,\n    // Topology\n    topology: topology,\n    // Topology Options\n    topologyOptions: topologyOptions,\n    // Promise library\n    promiseLibrary: promiseLibrary,\n    // Optional ClientSession\n    session: options.session\n  };\n};\n/**\n * CommandCursor stream data event, fired for each document in the cursor.\n *\n * @event CommandCursor#data\n * @type {object}\n */\n\n/**\n * CommandCursor stream end event\n *\n * @event CommandCursor#end\n * @type {null}\n */\n\n/**\n * CommandCursor stream close event\n *\n * @event CommandCursor#close\n * @type {null}\n */\n\n/**\n * CommandCursor stream readable event\n *\n * @event CommandCursor#readable\n * @type {null}\n */\n// Inherit from Readable\n\n\ninherits(CommandCursor, Readable); // Set the methods to inherit from prototype\n\nvar methodsToInherit = ['_next', 'next', 'hasNext', 'each', 'forEach', 'toArray', 'rewind', 'bufferedCount', 'readBufferedDocuments', 'close', 'isClosed', 'kill', 'setCursorBatchSize', '_find', '_getmore', '_killcursor', 'isDead', 'explain', 'isNotified', 'isKilled', '_endSession', '_initImplicitSession']; // Only inherit the types we need\n\nfor (var i = 0; i < methodsToInherit.length; i++) {\n  CommandCursor.prototype[methodsToInherit[i]] = CoreCursor.prototype[methodsToInherit[i]];\n}\n/**\n * Set the ReadPreference for the cursor.\n * @method\n * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.\n * @throws {MongoError}\n * @return {Cursor}\n */\n\n\nCommandCursor.prototype.setReadPreference = function (readPreference) {\n  if (this.s.state === CommandCursor.CLOSED || this.isDead()) {\n    throw MongoError.create({\n      message: 'Cursor is closed',\n      driver: true\n    });\n  }\n\n  if (this.s.state !== CommandCursor.INIT) {\n    throw MongoError.create({\n      message: 'cannot change cursor readPreference after cursor has been accessed',\n      driver: true\n    });\n  }\n\n  if (readPreference instanceof ReadPreference) {\n    this.s.options.readPreference = readPreference;\n  } else if (typeof readPreference === 'string') {\n    this.s.options.readPreference = new ReadPreference(readPreference);\n  } else {\n    throw new TypeError('Invalid read preference: ' + readPreference);\n  }\n\n  return this;\n};\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {CommandCursor}\n */\n\n\nCommandCursor.prototype.batchSize = function (value) {\n  if (this.s.state === CommandCursor.CLOSED || this.isDead()) throw MongoError.create({\n    message: 'Cursor is closed',\n    driver: true\n  });\n  if (typeof value !== 'number') throw MongoError.create({\n    message: 'batchSize requires an integer',\n    driver: true\n  });\n  if (this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n};\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {CommandCursor}\n */\n\n\nCommandCursor.prototype.maxTimeMS = function (value) {\n  if (this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n\n  return this;\n};\n/**\n * Return the cursor logger\n * @method\n * @return {Logger} return the cursor logger\n * @ignore\n */\n\n\nCommandCursor.prototype.getLogger = function () {\n  return this.logger;\n};\n\nCommandCursor.prototype.get = CommandCursor.prototype.toArray;\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function CommandCursor.prototype.next\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function CommandCursor.prototype.hasNext\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed.\n * @method CommandCursor.prototype.toArray\n * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method CommandCursor.prototype.each\n * @param {CommandCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a KillCursor command and emitting close.\n * @method CommandCursor.prototype.close\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method CommandCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Clone the cursor\n * @function CommandCursor.prototype.clone\n * @return {CommandCursor}\n */\n\n/**\n * Resets the cursor\n * @function CommandCursor.prototype.rewind\n * @return {CommandCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback CommandCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback CommandCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method CommandCursor.prototype.forEach\n * @param {CommandCursor~iteratorCallback} iterator The iteration callback.\n * @param {CommandCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nCommandCursor.INIT = 0;\nCommandCursor.OPEN = 1;\nCommandCursor.CLOSED = 2;\nmodule.exports = CommandCursor;","map":null,"metadata":{},"sourceType":"script"}