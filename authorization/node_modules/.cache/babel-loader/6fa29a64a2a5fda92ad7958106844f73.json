{"ast":null,"code":"'use strict';\n\nvar MongoNetworkError = require('mongodb-core').MongoNetworkError;\n\nvar mongoErrorContextSymbol = require('mongodb-core').mongoErrorContextSymbol;\n\nvar GET_MORE_NON_RESUMABLE_CODES = new Set([136, // CappedPositionLost\n237, // CursorKilled\n11601 // Interrupted\n]); // From spec@https://github.com/mongodb/specifications/blob/35e466ddf25059cb30e4113de71cdebd3754657f/source/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the following error codes\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n// - a server error response with an error message containing the substring \"not master\" or \"node is recovering\"\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\n\nfunction isGetMoreError(error) {\n  if (error[mongoErrorContextSymbol]) {\n    return error[mongoErrorContextSymbol].isGetMore;\n  }\n}\n\nfunction isResumableError(error) {\n  if (!isGetMoreError(error)) {\n    return false;\n  }\n\n  return !!(error instanceof MongoNetworkError || !GET_MORE_NON_RESUMABLE_CODES.has(error.code) || error.message.match(/not master/) || error.message.match(/node is recovering/));\n}\n\nmodule.exports = {\n  GET_MORE_NON_RESUMABLE_CODES: GET_MORE_NON_RESUMABLE_CODES,\n  isResumableError: isResumableError\n};","map":null,"metadata":{},"sourceType":"script"}