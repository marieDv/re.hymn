{"ast":null,"code":"'use strict';\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar executeDbAdminCommand = require('./db_ops').executeDbAdminCommand;\n/**\n * Get ReplicaSet status\n *\n * @param {Admin} a collection instance.\n * @param {Object} [options] Optional settings. See Admin.prototype.replSetGetStatus for a list of options.\n * @param {Admin~resultCallback} [callback] The command result callback.\n */\n\n\nfunction replSetGetStatus(admin, options, callback) {\n  executeDbAdminCommand(admin.s.db, {\n    replSetGetStatus: 1\n  }, options, callback);\n}\n/**\n * Retrieve this db's server status.\n *\n * @param {Admin} a collection instance.\n * @param {Object} [options] Optional settings. See Admin.prototype.serverStatus for a list of options.\n * @param {Admin~resultCallback} [callback] The command result callback\n */\n\n\nfunction serverStatus(admin, options, callback) {\n  executeDbAdminCommand(admin.s.db, {\n    serverStatus: 1\n  }, options, callback);\n}\n/**\n * Validate an existing collection\n *\n * @param {Admin} a collection instance.\n * @param {string} collectionName The name of the collection to validate.\n * @param {Object} [options] Optional settings. See Admin.prototype.validateCollection for a list of options.\n * @param {Admin~resultCallback} [callback] The command result callback.\n */\n\n\nfunction validateCollection(admin, collectionName, options, callback) {\n  var command = {\n    validate: collectionName\n  };\n  var keys = Object.keys(options); // Decorate command with extra options\n\n  for (var i = 0; i < keys.length; i++) {\n    if (options.hasOwnProperty(keys[i]) && keys[i] !== 'session') {\n      command[keys[i]] = options[keys[i]];\n    }\n  }\n\n  executeCommand(admin.s.db, command, options, function (err, doc) {\n    if (err != null) return callback(err, null);\n    if (doc.ok === 0) return callback(new Error('Error with validate command'), null);\n    if (doc.result != null && doc.result.constructor !== String) return callback(new Error('Error with validation data'), null);\n    if (doc.result != null && doc.result.match(/exception|corrupt/) != null) return callback(new Error('Error: invalid collection ' + collectionName), null);\n    if (doc.valid != null && !doc.valid) return callback(new Error('Error: invalid collection ' + collectionName), null);\n    return callback(null, doc);\n  });\n}\n\nmodule.exports = {\n  replSetGetStatus: replSetGetStatus,\n  serverStatus: serverStatus,\n  validateCollection: validateCollection\n};","map":null,"metadata":{},"sourceType":"script"}