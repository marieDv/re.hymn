{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n\nvar requireOptional = require('require_optional');\n/**\n * Generate a UUIDv4\n */\n\n\nvar uuidV4 = function uuidV4() {\n  var result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n};\n/**\n * Returns the duration calculated from two high resolution timers in milliseconds\n *\n * @param {Object} started A high resolution timestamp created from `process.hrtime()`\n * @returns {Number} The duration in milliseconds\n */\n\n\nvar calculateDurationInMs = function calculateDurationInMs(started) {\n  var hrtime = process.hrtime(started);\n  return (hrtime[0] * 1e9 + hrtime[1]) / 1e6;\n};\n/**\n * Relays events for a given listener and emitter\n *\n * @param {EventEmitter} listener the EventEmitter to listen to the events from\n * @param {EventEmitter} emitter the EventEmitter to relay the events to\n */\n\n\nfunction relayEvents(listener, emitter, events) {\n  events.forEach(function (eventName) {\n    return listener.on(eventName, function (event) {\n      return emitter.emit(eventName, event);\n    });\n  });\n} // Grab Kerberos values if they exist, otherwise set them to null\n\n\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n\ntry {\n  var kerberos = requireOptional('kerberos');\n\n  if (kerberos) {\n    Kerberos = kerberos.Kerberos;\n    MongoAuthProcess = kerberos.processes.MongoAuthProcess;\n  }\n} catch (err) {\n  console.warn(err.message);\n} // Throw an error if an attempt to use EJSON is made when it is not installed\n\n\nvar noEJSONError = function noEJSONError() {\n  throw new Error('The `mongodb-extjson` package was not found. Please install it and try again.');\n}; // Facilitate loading EJSON optionally\n\n\nvar retrieveEJSON = function retrieveEJSON() {\n  var EJSON = null;\n\n  try {\n    EJSON = requireOptional('mongodb-extjson');\n  } catch (error) {} // eslint-disable-line\n\n\n  if (!EJSON) {\n    EJSON = {\n      parse: noEJSONError,\n      deserialize: noEJSONError,\n      serialize: noEJSONError,\n      stringify: noEJSONError,\n      setBSONModule: noEJSONError,\n      BSON: noEJSONError\n    };\n  }\n\n  return EJSON;\n};\n/*\n * Checks that collation is supported by server.\n *\n * @param {Server} [server] to check against\n * @param {object} [cmd] object where collation may be specified\n * @param {function} [callback] callback function\n * @return true if server does not support collation\n */\n\n\nfunction collationNotSupported(server, cmd) {\n  return cmd && cmd.collation && server.ismaster && server.ismaster.maxWireVersion < 5;\n}\n\nmodule.exports = {\n  uuidV4: uuidV4,\n  calculateDurationInMs: calculateDurationInMs,\n  relayEvents: relayEvents,\n  Kerberos: Kerberos,\n  MongoAuthProcess: MongoAuthProcess,\n  collationNotSupported: collationNotSupported,\n  retrieveEJSON: retrieveEJSON\n};","map":null,"metadata":{},"sourceType":"script"}