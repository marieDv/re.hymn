{"ast":null,"code":"'use strict';\n\nvar f = require('util').format,\n    require_optional = require('require_optional'); // Set property function\n\n\nvar setProperty = function setProperty(obj, prop, flag, values) {\n  Object.defineProperty(obj, prop.name, {\n    enumerable: true,\n    set: function set(value) {\n      if (typeof value !== 'boolean') throw new Error(f('%s required a boolean', prop.name)); // Flip the bit to 1\n\n      if (value === true) values.flags |= flag; // Flip the bit to 0 if it's set, otherwise ignore\n\n      if (value === false && (values.flags & flag) === flag) values.flags ^= flag;\n      prop.value = value;\n    },\n    get: function get() {\n      return prop.value;\n    }\n  });\n}; // Set property function\n\n\nvar getProperty = function getProperty(obj, propName, fieldName, values, func) {\n  Object.defineProperty(obj, propName, {\n    enumerable: true,\n    get: function get() {\n      // Not parsed yet, parse it\n      if (values[fieldName] == null && obj.isParsed && !obj.isParsed()) {\n        obj.parse();\n      } // Do we have a post processing function\n\n\n      if (typeof func === 'function') return func(values[fieldName]); // Return raw value\n\n      return values[fieldName];\n    }\n  });\n}; // Set simple property\n\n\nvar getSingleProperty = function getSingleProperty(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    enumerable: true,\n    get: function get() {\n      return value;\n    }\n  });\n}; // Shallow copy\n\n\nvar copy = function copy(fObj, tObj) {\n  tObj = tObj || {};\n\n  for (var name in fObj) {\n    tObj[name] = fObj[name];\n  }\n\n  return tObj;\n};\n\nvar debugOptions = function debugOptions(debugFields, options) {\n  var finaloptions = {};\n  debugFields.forEach(function (n) {\n    finaloptions[n] = options[n];\n  });\n  return finaloptions;\n};\n\nvar retrieveBSON = function retrieveBSON() {\n  var BSON = require('bson');\n\n  BSON.native = false;\n\n  try {\n    var optionalBSON = require_optional('bson-ext');\n\n    if (optionalBSON) {\n      optionalBSON.native = true;\n      return optionalBSON;\n    }\n  } catch (err) {} // eslint-disable-line\n\n\n  return BSON;\n}; // Throw an error if an attempt to use Snappy is made when Snappy is not installed\n\n\nvar noSnappyWarning = function noSnappyWarning() {\n  throw new Error('Attempted to use Snappy compression, but Snappy is not installed. Install or disable Snappy compression and try again.');\n}; // Facilitate loading Snappy optionally\n\n\nvar retrieveSnappy = function retrieveSnappy() {\n  var snappy = null;\n\n  try {\n    snappy = require_optional('snappy');\n  } catch (error) {} // eslint-disable-line\n\n\n  if (!snappy) {\n    snappy = {\n      compress: noSnappyWarning,\n      uncompress: noSnappyWarning,\n      compressSync: noSnappyWarning,\n      uncompressSync: noSnappyWarning\n    };\n  }\n\n  return snappy;\n};\n\nexports.setProperty = setProperty;\nexports.getProperty = getProperty;\nexports.getSingleProperty = getSingleProperty;\nexports.copy = copy;\nexports.debugOptions = debugOptions;\nexports.retrieveBSON = retrieveBSON;\nexports.retrieveSnappy = retrieveSnappy;","map":null,"metadata":{},"sourceType":"script"}